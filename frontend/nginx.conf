worker_processes 1;

events { worker_connections 1024; }

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html;

    location / {
      try_files $uri $uri/ /index.html;
    }
  }
}

# ðŸ”¹ worker_processes 1;
# With worker_processes 1, NGINX will spin up a single process to handle all requests.
# This process does not bind to one CPU core by default, but it will only utilize one core at a time, 
# unless more workers are configured.

# Read this for a thorough explanation: https://docs.google.com/document/d/1gL1s47HI1EXZQvHxKklF0fR9PbavNOU6NwuEkxSOuCE/edit?usp=sharing

# Fine for small deployments or containers

# ðŸ”¹ events { worker_connections 1024; }
# Allow each worker to handle up to 1024 connections at a time

# Not too important unless you're tuning for high traffic

# ðŸ”¹ http { ... }
# This is the main section for serving web traffic

# Inside http:
# âœ… include mime.types;
# Lets NGINX know what type of file it's serving (e.g., .js = application/javascript)

# âœ… default_type application/octet-stream;
# Default file type if unknown (safe fallback)

# âœ… sendfile on;
# Speeds up file serving by using the OS kernel directly

# âœ… keepalive_timeout 65;
# Keep a connection open for 65 seconds before closing it

# Improves performance for clients making many requests

# ðŸ”¹ server { ... }
# Defines one "server block" â€” this one listens on port 80

# âœ… listen 80;
# Standard HTTP port

# âœ… server_name localhost;
# Just a placeholder â€” doesn't affect much inside Docker

# âœ… root /usr/share/nginx/html;
# This is where NGINX will look for your files

# We copied your built Vite app here

# âœ… index index.html;
# This is the default file to serve when user visits /

# ðŸ”„ location / { try_files $uri $uri/ /index.html; }
# This is the magic line for SPAs.

# It means:

# "If someone visits /dashboard, and there's no /dashboard.html or folder named dashboard,
# fall back to /index.html and let React Router handle it."

# âœ… This ensures:

# Browser refreshes donâ€™t break

# All SPA routes work

# Users never see 404 unless it's truly invalid